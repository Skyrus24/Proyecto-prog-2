package agendamiento_clinico.Paciente;

import agendamiento_clinico.BaseDatos;
import agendamiento_clinico.Grilla;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;

public class FrmPacientes extends javax.swing.JDialog {
    private BaseDatos bd=new BaseDatos();
    private Grilla grd=new Grilla();
    private char opc='z';
            
    public FrmPacientes(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        if(!bd.hayConexion()){
            JOptionPane.showMessageDialog(null, "Error de conexión con la base de datos");
        }
        this.habilitarCampos(false);
        this.habilitarBotones(true);
        this.actualizarGrilla();
        this.setLocationRelativeTo(null);
    }

    private void habilitarCampos(boolean estado){
        txtIdPaciente.setEnabled(estado);
        txtNombre.setEnabled(estado);
        txtApellidos.setEnabled(estado);
        dcFechaNacimiento.setEnabled(estado);
        cboGenero.setEnabled(estado);
        txtNumDocumento.setEnabled(estado);
        txtTipoDocumento.setEnabled(estado);
        txtDireccion.setEnabled(estado);
        txtTelefono.setEnabled(estado);
        txtEmail.setEnabled(estado);
    }
    
    private void habilitarBotones(boolean estado){
        this.cmdAgregar.setEnabled(estado);
        this.cmdBorrar.setEnabled(estado);
        this.cmdActualizar.setEnabled(estado);
        this.cmdGuardar.setEnabled(!estado);
        this.cmdCancelar.setEnabled(!estado);
    }
    
    private void limpiarCampos(){
        txtIdPaciente.setText(null);
        txtNombre.setText(null);
        txtApellidos.setText(null);
        dcFechaNacimiento.setDate(null);
        cboGenero.setSelectedIndex(0);
        txtNumDocumento.setText(null);
        txtTipoDocumento.setText(null);
        txtDireccion.setText(null);
        txtTelefono.setText(null);
        txtEmail.setText(null);
    }
    
    private void actualizarGrilla(){
        String campos [] = {"id_paciente", "nombre", "apellidos", "numero_documento", "telefono"};
        this.grd.cargarGrilla(grdPacientes, "pacientes", campos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtIdPaciente = new javax.swing.JFormattedTextField();
        txtNombre = new javax.swing.JFormattedTextField();
        txtApellidos = new javax.swing.JFormattedTextField();
        txtNumDocumento = new javax.swing.JFormattedTextField();
        txtTipoDocumento = new javax.swing.JFormattedTextField();
        txtEmail = new javax.swing.JFormattedTextField();
        txtTelefono = new javax.swing.JFormattedTextField();
        txtDireccion = new javax.swing.JFormattedTextField();
        cboGenero = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        dcFechaNacimiento = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        txtBuscar = new javax.swing.JFormattedTextField();
        cboCriterio = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        grdPacientes = new javax.swing.JTable();
        cmdAgregar = new javax.swing.JButton();
        cmdCancelar = new javax.swing.JButton();
        cmdActualizar = new javax.swing.JButton();
        cmdBorrar = new javax.swing.JButton();
        cmdGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Cambria", 3, 14)); // NOI18N
        jLabel1.setText("Email");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(610, 210, 90, 20);

        jLabel2.setFont(new java.awt.Font("Cambria", 3, 14)); // NOI18N
        jLabel2.setText("ID Paciente");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(40, 30, 90, 20);

        jLabel3.setFont(new java.awt.Font("Cambria", 3, 14)); // NOI18N
        jLabel3.setText("Nombre");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(300, 30, 90, 20);

        jLabel4.setFont(new java.awt.Font("Cambria", 3, 14)); // NOI18N
        jLabel4.setText("Apellido");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(620, 30, 90, 20);

        jLabel5.setFont(new java.awt.Font("Cambria", 3, 14)); // NOI18N
        jLabel5.setText("Fecha de Nacimiento (YYYY-MM-DD)");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(40, 120, 240, 20);

        jLabel6.setFont(new java.awt.Font("Cambria", 3, 14)); // NOI18N
        jLabel6.setText("Género");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(300, 120, 90, 20);

        jLabel7.setFont(new java.awt.Font("Cambria", 3, 14)); // NOI18N
        jLabel7.setText("Nro. Documento");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(520, 120, 130, 20);

        jLabel8.setFont(new java.awt.Font("Cambria", 3, 14)); // NOI18N
        jLabel8.setText("Tipo Documento");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(720, 120, 120, 20);

        jLabel10.setFont(new java.awt.Font("Cambria", 3, 14)); // NOI18N
        jLabel10.setText("Teléfono");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(300, 210, 90, 20);
        jPanel1.add(txtIdPaciente);
        txtIdPaciente.setBounds(30, 60, 240, 30);
        jPanel1.add(txtNombre);
        txtNombre.setBounds(300, 60, 270, 30);
        jPanel1.add(txtApellidos);
        txtApellidos.setBounds(610, 60, 300, 30);

        txtNumDocumento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        jPanel1.add(txtNumDocumento);
        txtNumDocumento.setBounds(510, 150, 180, 30);
        jPanel1.add(txtTipoDocumento);
        txtTipoDocumento.setBounds(720, 150, 190, 30);
        jPanel1.add(txtEmail);
        txtEmail.setBounds(610, 240, 300, 30);
        jPanel1.add(txtTelefono);
        txtTelefono.setBounds(300, 240, 270, 30);
        jPanel1.add(txtDireccion);
        txtDireccion.setBounds(30, 240, 240, 30);

        cboGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Masculino", "Femenino", "Otros" }));
        jPanel1.add(cboGenero);
        cboGenero.setBounds(300, 150, 190, 30);

        jLabel11.setFont(new java.awt.Font("Cambria", 3, 14)); // NOI18N
        jLabel11.setText("Dirrección");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(40, 200, 90, 20);
        jPanel1.add(dcFechaNacimiento);
        dcFechaNacimiento.setBounds(30, 150, 260, 30);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel2.setLayout(null);

        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarKeyReleased(evt);
            }
        });
        jPanel2.add(txtBuscar);
        txtBuscar.setBounds(320, 10, 590, 26);

        cboCriterio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "Apellido", "Nro. Documento" }));
        jPanel2.add(cboCriterio);
        cboCriterio.setBounds(186, 10, 130, 26);

        jLabel9.setFont(new java.awt.Font("Cambria", 3, 14)); // NOI18N
        jLabel9.setText("Buscar Por:");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(90, 10, 90, 20);

        grdPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Apellidos", "Documento", "Teléfono"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(grdPacientes);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 60, 910, 220);

        cmdAgregar.setText("Agregar");
        cmdAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAgregarActionPerformed(evt);
            }
        });
        jPanel2.add(cmdAgregar);
        cmdAgregar.setBounds(420, 300, 100, 40);

        cmdCancelar.setText("Cancelar");
        cmdCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelarActionPerformed(evt);
            }
        });
        jPanel2.add(cmdCancelar);
        cmdCancelar.setBounds(540, 300, 80, 40);

        cmdActualizar.setText("Actualizar");
        cmdActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdActualizarActionPerformed(evt);
            }
        });
        jPanel2.add(cmdActualizar);
        cmdActualizar.setBounds(730, 300, 100, 40);

        cmdBorrar.setText("Borrar");
        cmdBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBorrarActionPerformed(evt);
            }
        });
        jPanel2.add(cmdBorrar);
        cmdBorrar.setBounds(840, 300, 76, 40);

        cmdGuardar.setText("Guardar");
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });
        jPanel2.add(cmdGuardar);
        cmdGuardar.setBounds(640, 300, 76, 40);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 929, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarActionPerformed

    private void cmdAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAgregarActionPerformed
        this.opc='N';
        this.limpiarCampos();
        this.habilitarCampos(true);
        this.habilitarBotones(false);
        this.txtIdPaciente.setEnabled(false);
        this.txtNombre.requestFocus();
    }//GEN-LAST:event_cmdAgregarActionPerformed

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        if(txtNombre.getText().isEmpty() || txtApellidos.getText().isEmpty() || txtNumDocumento.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Nombre, Apellidos y Nro. Documento son obligatorios.");
            return;
        }

        String fechaFormateada = "";
        if (dcFechaNacimiento.getDate() != null) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            fechaFormateada = sdf.format(dcFechaNacimiento.getDate());
        }

        String valores = String.format("'%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s'",
            txtNombre.getText(),
            txtApellidos.getText(),
            fechaFormateada,
            cboGenero.getSelectedItem().toString(),
            txtNumDocumento.getText(),
            txtTipoDocumento.getText(),
            txtDireccion.getText(),
            txtTelefono.getText(),
            txtEmail.getText()
        );
        
        String campos = "nombre, apellidos, fecha_nacimiento, genero, numero_documento, tipo_documento, direccion, telefono, email";

        if(this.opc=='N'){
            bd.insertarRegistro("pacientes(" + campos + ")", valores);
        }else{
            String actualizaciones = String.format(
                "nombre='%s', apellidos='%s', fecha_nacimiento='%s', genero='%s', numero_documento='%s', " +
                "tipo_documento='%s', direccion='%s', telefono='%s', email='%s'",
                txtNombre.getText(),
                txtApellidos.getText(),
                fechaFormateada,
                cboGenero.getSelectedItem().toString(),
                txtNumDocumento.getText(),
                txtTipoDocumento.getText(),
                txtDireccion.getText(),
                txtTelefono.getText(),
                txtEmail.getText()
            );
            String condicion = "id_paciente=" + this.txtIdPaciente.getText();
            bd.actualizarRegistro("pacientes", actualizaciones, condicion);
        }
        
        this.opc='z';
        this.limpiarCampos();
        this.habilitarCampos(false);
        this.habilitarBotones(true);
        this.actualizarGrilla();
    }//GEN-LAST:event_cmdGuardarActionPerformed

    private void cmdActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdActualizarActionPerformed
        int filaSeleccionada = this.grdPacientes.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un paciente de la lista para actualizar.");
            return;
        }

        String idPaciente = this.grdPacientes.getValueAt(filaSeleccionada, 0).toString();

        try {
            ResultSet rs = bd.consultarRegistros("SELECT * FROM pacientes WHERE id_paciente=" + idPaciente);
            if(rs.next()){
                txtIdPaciente.setText(rs.getString("id_paciente"));
                txtNombre.setText(rs.getString("nombre"));
                txtApellidos.setText(rs.getString("apellidos"));
                
                try {
                    String fechaDesdeBD = rs.getString("fecha_nacimiento");
                    if (fechaDesdeBD != null && !fechaDesdeBD.isEmpty()) {
                        java.util.Date fecha = new SimpleDateFormat("yyyy-MM-dd").parse(fechaDesdeBD);
                        dcFechaNacimiento.setDate(fecha);
                    } else {
                        dcFechaNacimiento.setDate(null);
                    }
                } catch (ParseException e) {
                    dcFechaNacimiento.setDate(null);
                }

                cboGenero.setSelectedItem(rs.getString("genero"));
                txtNumDocumento.setText(rs.getString("numero_documento"));
                txtTipoDocumento.setText(rs.getString("tipo_documento"));
                txtDireccion.setText(rs.getString("direccion"));
                txtTelefono.setText(rs.getString("telefono"));
                txtEmail.setText(rs.getString("email"));
                
                this.opc='M';
                this.habilitarBotones(false);
                this.habilitarCampos(true);
                this.txtIdPaciente.setEnabled(false);
                this.txtNombre.requestFocus();
            }
        } catch(SQLException error){
            JOptionPane.showMessageDialog(null, "Error al cargar los datos del paciente: " + error);
        }
    }//GEN-LAST:event_cmdActualizarActionPerformed

    private void cmdBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBorrarActionPerformed
        int filaSeleccionada = this.grdPacientes.getSelectedRow();

        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, 
                "Por favor, seleccione un paciente de la lista para borrar.", 
                "Aviso", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        String idPaciente = this.grdPacientes.getValueAt(filaSeleccionada, 0).toString();
        bd.borrarRegistro("pacientes", "id_paciente=" + idPaciente);
        this.actualizarGrilla();
    }//GEN-LAST:event_cmdBorrarActionPerformed

    private void cmdCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelarActionPerformed
        this.opc='z';
        this.limpiarCampos();
        this.habilitarCampos(false);
        this.habilitarBotones(true);
    }//GEN-LAST:event_cmdCancelarActionPerformed

    private void txtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyReleased
        int criterioIndex = cboCriterio.getSelectedIndex();
        int columnaParaFiltrar = 1;
        
        switch(criterioIndex) {
            case 0: columnaParaFiltrar = 1; break;
            case 1: columnaParaFiltrar = 2; break;
            case 2: columnaParaFiltrar = 3; break;
        }
        
        this.grd.filtrarGrilla(grdPacientes, this.txtBuscar.getText(), columnaParaFiltrar);
    }//GEN-LAST:event_txtBuscarKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmPacientes dialog = new FrmPacientes(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboCriterio;
    private javax.swing.JComboBox<String> cboGenero;
    private javax.swing.JButton cmdActualizar;
    private javax.swing.JButton cmdAgregar;
    private javax.swing.JButton cmdBorrar;
    private javax.swing.JButton cmdCancelar;
    private javax.swing.JButton cmdGuardar;
    private com.toedter.calendar.JDateChooser dcFechaNacimiento;
    private javax.swing.JTable grdPacientes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField txtApellidos;
    private javax.swing.JFormattedTextField txtBuscar;
    private javax.swing.JFormattedTextField txtDireccion;
    private javax.swing.JFormattedTextField txtEmail;
    private javax.swing.JFormattedTextField txtIdPaciente;
    private javax.swing.JFormattedTextField txtNombre;
    private javax.swing.JFormattedTextField txtNumDocumento;
    private javax.swing.JFormattedTextField txtTelefono;
    private javax.swing.JFormattedTextField txtTipoDocumento;
    // End of variables declaration//GEN-END:variables
}
