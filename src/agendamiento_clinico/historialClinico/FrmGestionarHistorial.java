package agendamiento_clinico.historialClinico;

import agendamiento_clinico.BaseDatos;
import agendamiento_clinico.DatosCombo;
import agendamiento_clinico.Grilla;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class FrmGestionarHistorial extends javax.swing.JDialog {

    private final BaseDatos bd = new BaseDatos();
    private final Grilla grilla = new Grilla();
    private char opc = 'z'; // 'N' para Nuevo, 'M' para Modificar

    public FrmGestionarHistorial(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        this.txtCodigo.setEnabled(false);

        if (bd.hayConexion()) {
            String[] columnas = {"ID", "Fecha", "Paciente", "Médico", "Diagnóstico"};
            int[] anchos = {40, 120, 220, 220, 200};
            grilla.configurarmodelo(grdHistoriales, columnas, anchos);
            
            cargarHistoriales();
            
            // Cargar combos que se usarán siempre
            bd.cargarCombo(cboPaciente, "id_paciente, CONCAT(nombre, ' ', apellidos)", "pacientes");
            bd.cargarCombo(cboMedico, "id_medico, CONCAT(nombre, ' ', apellidos)", "medicos");
            
            habilitar(false); // Inicia en modo de solo lectura
        } else {
            JOptionPane.showMessageDialog(null, "Error de Conexión con la Base de Datos", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }
    
    private void cargarHistoriales() {
        String sql = "SELECT h.id_historial, h.fecha_registro, " +
                     "CONCAT(p.nombre, ' ', p.apellidos) AS nombre_paciente, " +
                     "CONCAT(m.nombre, ' ', m.apellidos) AS nombre_medico, " +
                     "h.diagnostico " +
                     "FROM historial_clinico h " +
                     "JOIN pacientes p ON h.id_paciente = p.id_paciente " +
                     "JOIN medicos m ON h.id_medico = m.id_medico " +
                     "ORDER BY h.fecha_registro DESC";

        DefaultTableModel modelo = (DefaultTableModel) grdHistoriales.getModel();
        modelo.setRowCount(0); 

        try {
            ResultSet rs = bd.consultarRegistros(sql);
            while (rs.next()) {
                modelo.addRow(new Object[]{
                    rs.getInt("id_historial"),
                    rs.getString("fecha_registro"),
                    rs.getString("nombre_paciente"),
                    rs.getString("nombre_medico"),
                    rs.getString("diagnostico")
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar los historiales: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        grdHistoriales = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        cboCriterio = new javax.swing.JComboBox<>();
        txtBuscar = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cboCita = new javax.swing.JComboBox<>();
        cboPaciente = new javax.swing.JComboBox<>();
        txtCodigo = new javax.swing.JTextField();
        cboMedico = new javax.swing.JComboBox<>();
        jdcFechaRegistro = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaAntecedentes = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txaDiagnostico = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txaTratamiento = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        txaResultadosExamenes = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        txaNotasEvolucion = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        txaEnfermedades = new javax.swing.JTextArea();
        cmdCerrar = new javax.swing.JButton();
        cmdGuardar = new javax.swing.JButton();
        cmdNuevo = new javax.swing.JButton();
        cmdModificar = new javax.swing.JButton();
        cmdEliminar = new javax.swing.JButton();
        cmdCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Listado de Historiales", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 14))); // NOI18N
        jPanel1.setLayout(null);

        grdHistoriales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Fecha", "Paciente", "Médico", "Diagnóstico"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        grdHistoriales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                grdHistorialesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(grdHistoriales);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(16, 80, 940, 210);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel2.setText("Buscar por:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(30, 40, 80, 30);

        cboCriterio.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        cboCriterio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Paciente", "Médico" }));
        jPanel1.add(cboCriterio);
        cboCriterio.setBounds(110, 40, 130, 30);

        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarKeyReleased(evt);
            }
        });
        jPanel1.add(txtBuscar);
        txtBuscar.setBounds(250, 40, 710, 30);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Detalles de Historial", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 14))); // NOI18N
        jPanel2.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel1.setText("Médico:");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(450, 70, 60, 30);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel3.setText("Enfermedades:");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(670, 260, 140, 30);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel4.setText("Fecha Registro:");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(240, 30, 110, 30);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel5.setText("Cita Asociada:");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(580, 30, 100, 30);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel6.setText("Paciente:");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(10, 70, 80, 30);

        cboCita.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jPanel2.add(cboCita);
        cboCita.setBounds(680, 30, 280, 30);

        cboPaciente.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jPanel2.add(cboPaciente);
        cboPaciente.setBounds(90, 70, 340, 30);
        jPanel2.add(txtCodigo);
        txtCodigo.setBounds(90, 30, 130, 30);

        cboMedico.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jPanel2.add(cboMedico);
        cboMedico.setBounds(520, 70, 410, 30);
        jPanel2.add(jdcFechaRegistro);
        jdcFechaRegistro.setBounds(360, 30, 210, 26);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel7.setText("Código:");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(10, 30, 80, 30);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel8.setText("Antecedentes:");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(40, 120, 130, 30);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel9.setText("Diagnóstico:");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(350, 120, 120, 30);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel10.setText("Tratamiento:");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(670, 120, 110, 30);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel11.setText("Resultados Exámenes:");
        jPanel2.add(jLabel11);
        jLabel11.setBounds(40, 260, 180, 30);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel12.setText("Notas de Evolución:");
        jPanel2.add(jLabel12);
        jLabel12.setBounds(350, 260, 140, 30);

        txaAntecedentes.setColumns(20);
        txaAntecedentes.setRows(5);
        jScrollPane1.setViewportView(txaAntecedentes);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(40, 150, 260, 100);

        txaDiagnostico.setColumns(20);
        txaDiagnostico.setRows(5);
        jScrollPane3.setViewportView(txaDiagnostico);

        jPanel2.add(jScrollPane3);
        jScrollPane3.setBounds(350, 150, 270, 100);

        txaTratamiento.setColumns(20);
        txaTratamiento.setRows(5);
        jScrollPane4.setViewportView(txaTratamiento);

        jPanel2.add(jScrollPane4);
        jScrollPane4.setBounds(670, 150, 260, 100);

        txaResultadosExamenes.setColumns(20);
        txaResultadosExamenes.setRows(5);
        jScrollPane5.setViewportView(txaResultadosExamenes);

        jPanel2.add(jScrollPane5);
        jScrollPane5.setBounds(40, 290, 260, 100);

        txaNotasEvolucion.setColumns(20);
        txaNotasEvolucion.setRows(5);
        jScrollPane6.setViewportView(txaNotasEvolucion);

        jPanel2.add(jScrollPane6);
        jScrollPane6.setBounds(350, 290, 270, 100);

        txaEnfermedades.setColumns(20);
        txaEnfermedades.setRows(5);
        jScrollPane7.setViewportView(txaEnfermedades);

        jPanel2.add(jScrollPane7);
        jScrollPane7.setBounds(670, 290, 260, 100);

        cmdCerrar.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        cmdCerrar.setText("Cerrar");
        cmdCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCerrarActionPerformed(evt);
            }
        });

        cmdGuardar.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        cmdGuardar.setText("Guardar");
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });

        cmdNuevo.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        cmdNuevo.setText("Nuevo");
        cmdNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNuevoActionPerformed(evt);
            }
        });

        cmdModificar.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        cmdModificar.setText("Modificar");
        cmdModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdModificarActionPerformed(evt);
            }
        });

        cmdEliminar.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        cmdEliminar.setText("Eliminar");
        cmdEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEliminarActionPerformed(evt);
            }
        });

        cmdCancelar.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        cmdCancelar.setText("Cancelar");
        cmdCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 973, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cmdNuevo)
                        .addGap(18, 18, 18)
                        .addComponent(cmdModificar)
                        .addGap(18, 18, 18)
                        .addComponent(cmdEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmdGuardar)
                        .addGap(18, 18, 18)
                        .addComponent(cmdCancelar)
                        .addGap(18, 18, 18)
                        .addComponent(cmdCerrar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdCerrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(cmdNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(cmdModificar, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(cmdEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(cmdCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNuevoActionPerformed
        opc = 'N';
        limpiar();
        habilitar(true);
        
        cboCita.removeAllItems();
        String sqlCitas = "citas WHERE estado_cita = 'Atendida' AND id_cita NOT IN (SELECT id_cita FROM historial_clinico)";
        bd.cargarCombo(cboCita, "id_cita, motivo_consulta", sqlCitas);
        
        if (cboCita.getItemCount() == 0) {
            JOptionPane.showMessageDialog(this, "No hay citas atendidas disponibles para registrar un historial.", "Información", JOptionPane.INFORMATION_MESSAGE);
            cmdCancelarActionPerformed(null); // Vuelve al estado inicial si no hay citas
            return;
        }

        try {
            ResultSet rs = bd.consultarRegistros("SELECT IFNULL(MAX(id_historial), 0) + 1 AS nuevo_id FROM historial_clinico");
            if (rs.next()) {
                txtCodigo.setText(rs.getString("nuevo_id"));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al generar código: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        jdcFechaRegistro.requestFocus();
    }//GEN-LAST:event_cmdNuevoActionPerformed

    private void cmdCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelarActionPerformed
        habilitar(false);
        grdHistorialesMouseClicked(null);
    }//GEN-LAST:event_cmdCancelarActionPerformed

    private void txtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyReleased
        int criterioIndex = cboCriterio.getSelectedIndex();
        int columnaParaFiltrar;
        
        // Las columnas en la tabla son: 0=ID, 1=Fecha, 2=Paciente, 3=Médico, 4=Diagnóstico
        switch(criterioIndex) {
            case 0: // Se seleccionó "ID"
                columnaParaFiltrar = 0; 
                break;
            case 1: // Se seleccionó "Paciente"
                columnaParaFiltrar = 2;
                break;
            case 2: // Se seleccionó "Médico"
                columnaParaFiltrar = 3;
                break;
            default: // Por defecto, buscar por Paciente
                columnaParaFiltrar = 2;
        }
        
        grilla.filtrarGrilla(grdHistoriales, txtBuscar.getText(), columnaParaFiltrar);

    }//GEN-LAST:event_txtBuscarKeyReleased

    private void cmdModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdModificarActionPerformed
        if (grdHistoriales.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Primero debe seleccionar un historial de la lista.", "Atención", JOptionPane.WARNING_MESSAGE);
            return;
        }
        opc = 'M';
        habilitar(true);
    }//GEN-LAST:event_cmdModificarActionPerformed

    private void cmdEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEliminarActionPerformed
        int filaSeleccionada = grdHistoriales.getSelectedRow();

        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Primero debe seleccionar un historial de la lista.", "Atención", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Obtener el ID directamente de la columna 0 de la fila seleccionada
        String idHistorial = grdHistoriales.getValueAt(filaSeleccionada, 0).toString();
        if (bd.borrarRegistro("historial_clinico", "id_historial = " + idHistorial)) {
            JOptionPane.showMessageDialog(this, "Registro eliminado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            cargarHistoriales();
            limpiar();
        }
    }//GEN-LAST:event_cmdEliminarActionPerformed

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        if (jdcFechaRegistro.getDate() == null || cboCita.getSelectedIndex() == -1 || txaDiagnostico.getText().trim().isEmpty() || txaTratamiento.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe completar todos los campos obligatorios:\nFecha, Cita, Diagnóstico y Tratamiento.", "Validación", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        DatosCombo cita = (DatosCombo) cboCita.getSelectedItem();
        DatosCombo paciente = (DatosCombo) cboPaciente.getSelectedItem();
        DatosCombo medico = (DatosCombo) cboMedico.getSelectedItem();
        SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String fechaRegistro = formatoFecha.format(jdcFechaRegistro.getDate());
        
        String antecedentes = txaAntecedentes.getText().replace("'", "''");
        String diagnostico = txaDiagnostico.getText().replace("'", "''");
        String enfermedades = txaEnfermedades.getText().replace("'", "''");
        String tratamiento = txaTratamiento.getText().replace("'", "''");
        String resultadosExamenes = txaResultadosExamenes.getText().replace("'", "''");
        String notasEvolucion = txaNotasEvolucion.getText().replace("'", "''");
        
        boolean exito = false;
        if (opc == 'N') {
            String columnas = "id_cita, id_paciente, id_medico, fecha_registro, antecedentes, diagnostico, enfermedades, tratamiento, resultados_examenes, notas_evolucion";
            String valores = String.format("%d, %d, %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s'",
                cita.getCodigo(), paciente.getCodigo(), medico.getCodigo(), fechaRegistro,
                antecedentes, diagnostico, enfermedades, tratamiento, resultadosExamenes, notasEvolucion);
            exito = bd.insertarRegistro("historial_clinico", columnas, valores);
        } else if (opc == 'M') {
            String campos = String.format(
                "id_cita=%d, id_paciente=%d, id_medico=%d, fecha_registro='%s', " +
                "antecedentes='%s', diagnostico='%s', enfermedades='%s', tratamiento='%s', " +
                "resultados_examenes='%s', notas_evolucion='%s'",
                cita.getCodigo(), paciente.getCodigo(), medico.getCodigo(), fechaRegistro,
                antecedentes, diagnostico, enfermedades, tratamiento, resultadosExamenes, notasEvolucion
            );
            String criterio = "id_historial = " + txtCodigo.getText();
            exito = bd.actualizarRegistro("historial_clinico", campos, criterio);
        }
        
        if (exito) {
            JOptionPane.showMessageDialog(this, "Operación realizada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            cargarHistoriales();
            habilitar(false);
        }
    }//GEN-LAST:event_cmdGuardarActionPerformed

    private void cmdCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_cmdCerrarActionPerformed

    private void grdHistorialesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grdHistorialesMouseClicked
        if (grdHistoriales.getSelectedRow() == -1) {
            limpiar();
            return;
        }

        String idHistorial = grdHistoriales.getValueAt(grdHistoriales.getSelectedRow(), 0).toString();
        
        try {
            ResultSet rs = bd.consultarRegistros("SELECT * FROM historial_clinico WHERE id_historial = " + idHistorial);
            if (rs.next()) {
                txtCodigo.setText(rs.getString("id_historial"));
                
                try {
                    Date fecha = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(rs.getString("fecha_registro"));
                    jdcFechaRegistro.setDate(fecha);
                } catch (ParseException ex) {
                    jdcFechaRegistro.setDate(null);
                }
                
                cboCita.removeAllItems();
                bd.cargarCombo(cboCita, "id_cita, motivo_consulta", "citas");
                seleccionarItemCombo(cboCita, rs.getInt("id_cita"));
                
                seleccionarItemCombo(cboPaciente, rs.getInt("id_paciente"));
                seleccionarItemCombo(cboMedico, rs.getInt("id_medico"));
                
                txaAntecedentes.setText(rs.getString("antecedentes"));
                txaDiagnostico.setText(rs.getString("diagnostico"));
                txaEnfermedades.setText(rs.getString("enfermedades"));
                txaTratamiento.setText(rs.getString("tratamiento"));
                txaResultadosExamenes.setText(rs.getString("resultados_examenes"));
                txaNotasEvolucion.setText(rs.getString("notas_evolucion"));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar datos del historial: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_grdHistorialesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmGestionarHistorial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmGestionarHistorial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmGestionarHistorial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmGestionarHistorial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmGestionarHistorial dialog = new FrmGestionarHistorial(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboCita;
    private javax.swing.JComboBox<String> cboCriterio;
    private javax.swing.JComboBox<String> cboMedico;
    private javax.swing.JComboBox<String> cboPaciente;
    private javax.swing.JButton cmdCancelar;
    private javax.swing.JButton cmdCerrar;
    private javax.swing.JButton cmdEliminar;
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JButton cmdModificar;
    private javax.swing.JButton cmdNuevo;
    private javax.swing.JTable grdHistoriales;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private com.toedter.calendar.JDateChooser jdcFechaRegistro;
    private javax.swing.JTextArea txaAntecedentes;
    private javax.swing.JTextArea txaDiagnostico;
    private javax.swing.JTextArea txaEnfermedades;
    private javax.swing.JTextArea txaNotasEvolucion;
    private javax.swing.JTextArea txaResultadosExamenes;
    private javax.swing.JTextArea txaTratamiento;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCodigo;
    // End of variables declaration//GEN-END:variables

    private void habilitar(boolean modoEdicion) {
        // Paneles de campos
        jdcFechaRegistro.setEnabled(modoEdicion);
        cboCita.setEnabled(modoEdicion);
        cboPaciente.setEnabled(modoEdicion);
        cboMedico.setEnabled(modoEdicion);
        txaAntecedentes.setEnabled(modoEdicion);
        txaDiagnostico.setEnabled(modoEdicion);
        txaTratamiento.setEnabled(modoEdicion);
        txaResultadosExamenes.setEnabled(modoEdicion);
        txaNotasEvolucion.setEnabled(modoEdicion);
        txaEnfermedades.setEnabled(modoEdicion);

        // Botones de acción
        cmdGuardar.setEnabled(modoEdicion);
        cmdCancelar.setEnabled(modoEdicion);
        
        // Botones de control y tabla
        cmdNuevo.setEnabled(!modoEdicion);
        cmdModificar.setEnabled(!modoEdicion);
        cmdEliminar.setEnabled(!modoEdicion);
        grdHistoriales.setEnabled(!modoEdicion);
        txtBuscar.setEnabled(!modoEdicion);
        
        if (!modoEdicion) {
            opc = 'z';
        }
    }
    
    private void limpiar() {
        txtCodigo.setText("");
        jdcFechaRegistro.setDate(null);
        cboCita.removeAllItems();
        if (cboPaciente.getItemCount() > 0) cboPaciente.setSelectedIndex(0);
        if (cboMedico.getItemCount() > 0) cboMedico.setSelectedIndex(0);
        txaAntecedentes.setText("");
        txaDiagnostico.setText("");
        txaTratamiento.setText("");
        txaResultadosExamenes.setText("");
        txaNotasEvolucion.setText("");
        txaEnfermedades.setText("");
        grdHistoriales.clearSelection();
    }
    
    private void seleccionarItemCombo(JComboBox combo, int id) {
        for (int i = 0; i < combo.getItemCount(); i++) {
            DatosCombo item = (DatosCombo) combo.getItemAt(i);
            if (item.getCodigo() == id) {
                combo.setSelectedIndex(i);
                return;
            }
        }
    }
    
}
