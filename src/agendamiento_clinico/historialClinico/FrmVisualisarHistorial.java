package agendamiento_clinico.historialClinico;

import agendamiento_clinico.BaseDatos;
import agendamiento_clinico.Grilla;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class FrmVisualisarHistorial extends javax.swing.JDialog {

    private final BaseDatos bd = new BaseDatos();
    private final Grilla grilla = new Grilla();

    public FrmVisualisarHistorial(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(parent);
        this.setTitle("Gestión de Historiales Clínicos");

        if (bd.hayConexion()) {
            configurarGrilla();
            configurarFiltros();
            cargarHistoriales(); // Carga inicial
        } else {
            JOptionPane.showMessageDialog(this, "Error de Conexión con la Base de Datos", "Error", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        }
    }
    
    private void configurarGrilla() {
        String[] columnas = {"ID Hist.", "Fecha Reg.", "Paciente", "Médico", "Diagnóstico Principal"};
        int[] anchos = {40, 120, 220, 220, 300};
        grilla.configurarmodelo(grdHistoriales, columnas, anchos);
    }
    
    private void configurarFiltros() {
        // Por defecto, el JDateChooser no es visible
        jdcFechaFiltro.setVisible(false);
        jdcFechaFiltro.setDate(new Date());
    }

    public void cargarHistoriales() {
        DefaultTableModel modelo = (DefaultTableModel) grdHistoriales.getModel();
        modelo.setRowCount(0);

        // Construcción de la consulta SQL base
        String sql = "SELECT h.id_historial, h.fecha_registro, " +
                     "CONCAT(p.nombre, ' ', p.apellidos) AS nombre_paciente, " +
                     "CONCAT(m.nombre, ' ', m.apellidos) AS nombre_medico, " +
                     "h.diagnostico " +
                     "FROM historial_clinico h " +
                     "JOIN pacientes p ON h.id_paciente = p.id_paciente " +
                     "JOIN medicos m ON h.id_medico = m.id_medico ";

        // Lógica de filtrado
        String criterio = cboCriterio.getSelectedItem().toString();
        String textoBusqueda = txtBuscar.getText().trim();
        
        String whereClause = "";

        if (!textoBusqueda.isEmpty()) {
            switch (criterio) {
                case "Paciente":
                    whereClause = "WHERE CONCAT(p.nombre, ' ', p.apellidos) LIKE '%" + textoBusqueda + "%'";
                    break;
                case "Médico":
                    whereClause = "WHERE CONCAT(m.nombre, ' ', m.apellidos) LIKE '%" + textoBusqueda + "%'";
                    break;
                case "ID Historial":
                    // Validar que solo se ingresen números para el ID
                    if (textoBusqueda.matches("\\d+")) {
                        whereClause = "WHERE h.id_historial = " + textoBusqueda;
                    } else {
                        // Si no es un número, no se filtra nada para evitar errores
                        textoBusqueda = "-1"; 
                        whereClause = "WHERE h.id_historial = " + textoBusqueda;
                    }
                    break;
            }
        }
        
        // Filtro especial para la fecha
        if (criterio.equals("Fecha")) {
            Date fechaSeleccionada = jdcFechaFiltro.getDate();
            if (fechaSeleccionada != null) {
                SimpleDateFormat formatoFechaSQL = new SimpleDateFormat("yyyy-MM-dd");
                String fechaSQL = formatoFechaSQL.format(fechaSeleccionada);
                whereClause = "WHERE DATE(h.fecha_registro) = '" + fechaSQL + "'";
            }
        }
        
        sql += whereClause + " ORDER BY h.fecha_registro DESC";

        try {
            ResultSet rs = bd.consultarRegistros(sql);
            while (rs.next()) {
                modelo.addRow(new Object[]{
                    rs.getInt("id_historial"),
                    rs.getString("fecha_registro"),
                    rs.getString("nombre_paciente"),
                    rs.getString("nombre_medico"),
                    rs.getString("diagnostico")
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar los historiales: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cboCriterio = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        grdHistoriales = new javax.swing.JTable();
        cmdBuscar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        jdcFechaFiltro = new com.toedter.calendar.JDateChooser();
        cmdCerrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Búsqueda de Historiales Clínicos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 18))); // NOI18N
        jPanel1.setLayout(null);

        cboCriterio.setFont(new java.awt.Font("Segoe UI", 3, 17)); // NOI18N
        cboCriterio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Paciente", "Médico", "ID Historial", "Fecha" }));
        cboCriterio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCriterioItemStateChanged(evt);
            }
        });
        jPanel1.add(cboCriterio);
        cboCriterio.setBounds(110, 40, 160, 34);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 17)); // NOI18N
        jLabel2.setText("Buscar por:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 40, 100, 24);

        grdHistoriales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Hist.", "Fecha Reg.", "Paciente ", "Médico", "Diagnóstico Principal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(grdHistoriales);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(16, 96, 1070, 440);

        cmdBuscar.setFont(new java.awt.Font("Segoe UI", 3, 17)); // NOI18N
        cmdBuscar.setText("Buscar");
        cmdBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBuscar);
        cmdBuscar.setBounds(970, 40, 90, 35);

        txtBuscar.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        jPanel1.add(txtBuscar);
        txtBuscar.setBounds(290, 40, 650, 32);
        jPanel1.add(jdcFechaFiltro);
        jdcFechaFiltro.setBounds(290, 40, 190, 26);

        cmdCerrar.setFont(new java.awt.Font("Segoe UI", 3, 17)); // NOI18N
        cmdCerrar.setText("Cerrar");
        cmdCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(1032, Short.MAX_VALUE)
                .addComponent(cmdCerrar)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(572, Short.MAX_VALUE)
                .addComponent(cmdCerrar)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(46, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBuscarActionPerformed
        cargarHistoriales();
    }//GEN-LAST:event_cmdBuscarActionPerformed

    private void cmdCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_cmdCerrarActionPerformed

    private void cboCriterioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCriterioItemStateChanged
        // Este evento se dispara cuando el usuario cambia la selección en el ComboBox
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String seleccion = (String) evt.getItem();
            if (seleccion.equals("Fecha")) {
                txtBuscar.setVisible(false); // Oculta el campo de texto
                jdcFechaFiltro.setVisible(true); // Muestra el selector de fecha
            } else {
                txtBuscar.setVisible(true); // Muestra el campo de texto
                jdcFechaFiltro.setVisible(false); // Oculta el selector de fecha
                txtBuscar.setText(""); // Limpia el campo de texto
            }
        }
    }//GEN-LAST:event_cboCriterioItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmVisualisarHistorial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmVisualisarHistorial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmVisualisarHistorial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmVisualisarHistorial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmVisualisarHistorial dialog = new FrmVisualisarHistorial(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboCriterio;
    private javax.swing.JButton cmdBuscar;
    private javax.swing.JButton cmdCerrar;
    private javax.swing.JTable grdHistoriales;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdcFechaFiltro;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
}
