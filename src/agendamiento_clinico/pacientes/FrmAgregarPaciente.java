package agendamiento_clinico.pacientes;

import agendamiento_clinico.BaseDatos;
import agendamiento_clinico.FrmBromaSuscripcion;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author TuNombre
 */
public class FrmAgregarPaciente extends javax.swing.JDialog {

    private final BaseDatos bd = new BaseDatos();
    private final char opc; // 'N' para Nuevo, 'M' para Modificar
    private final int idPacienteModificar; // Almacenará el ID del paciente a modificar
            
    public FrmAgregarPaciente(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.opc = 'N';
        this.idPacienteModificar = 0; // No se usa en modo Nuevo
        configurarFormulario("Agregar Nuevo Paciente");
    }
    

    public FrmAgregarPaciente(java.awt.Frame parent, boolean modal, int idPaciente) {
        super(parent, modal);
        initComponents();
        this.opc = 'M';
        this.idPacienteModificar = idPaciente;
        configurarFormulario("Modificar Paciente");
        cargarDatosPaciente();
    }
    
    private void configurarFormulario(String titulo){
        this.setTitle(titulo);
        this.setLocationRelativeTo(null);
        if(!bd.hayConexion()){
            JOptionPane.showMessageDialog(this, "Error de conexión con la base de datos", "Error de Conexión", JOptionPane.ERROR_MESSAGE);
        }
        
        if (opc == 'M') {
            cmdNuevo.setVisible(false);
            habilitarCampos(true);
            habilitarBotones(false);
        } else {
            habilitarCampos(false);
            habilitarBotones(true);
        }
    }
    
    private void cargarDatosPaciente() {
        try {
            ResultSet rs = bd.consultarRegistros("SELECT * FROM pacientes WHERE id_paciente=" + this.idPacienteModificar);
            if(rs.next()){
                txtNombre.setText(rs.getString("nombre"));
                txtApellidos.setText(rs.getString("apellidos"));
                
                try {
                    String fechaDesdeBD = rs.getString("fecha_nacimiento");
                    if (fechaDesdeBD != null && !fechaDesdeBD.isEmpty()) {
                        java.util.Date fecha = new SimpleDateFormat("yyyy-MM-dd").parse(fechaDesdeBD);
                        dcFechaNacimiento.setDate(fecha);
                    } else {
                        dcFechaNacimiento.setDate(null);
                    }
                } catch (ParseException e) {
                    dcFechaNacimiento.setDate(null);
                }

                cboGenero.setSelectedItem(rs.getString("genero"));
                txtNumDocumento.setText(rs.getString("numero_documento"));
                cboTipoDocumento.setSelectedItem(rs.getString("tipo_documento"));
                txtDireccion.setText(rs.getString("direccion"));
                txtTelefono.setText(rs.getString("telefono"));
                txtEmail.setText(rs.getString("email"));
            }
        } catch(SQLException error){
            JOptionPane.showMessageDialog(this, "Error al cargar los datos del paciente: " + error.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void habilitarCampos(boolean estado){
        txtNombre.setEnabled(estado);
        txtApellidos.setEnabled(estado);
        dcFechaNacimiento.setEnabled(estado);
        cboGenero.setEnabled(estado);
        txtNumDocumento.setEnabled(estado);
        cboTipoDocumento.setEnabled(estado);
        txtDireccion.setEnabled(estado);
        txtTelefono.setEnabled(estado);
        txtEmail.setEnabled(estado);
    }
    
    private void habilitarBotones(boolean estado){
        this.cmdNuevo.setEnabled(estado);
        this.cmdGuardar.setEnabled(!estado);
        this.cmdCancelar.setEnabled(!estado);
    }
    
    private void limpiarCampos(){
        txtNombre.setText(null);
        txtApellidos.setText(null);
        dcFechaNacimiento.setDate(null);
        cboGenero.setSelectedIndex(0);
        txtNumDocumento.setText(null);
        cboTipoDocumento.setSelectedIndex(0);
        txtDireccion.setText(null);
        txtTelefono.setText(null);
        txtEmail.setText(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JFormattedTextField();
        txtApellidos = new javax.swing.JFormattedTextField();
        txtNumDocumento = new javax.swing.JFormattedTextField();
        cboGenero = new javax.swing.JComboBox<>();
        txtDireccion = new javax.swing.JFormattedTextField();
        txtTelefono = new javax.swing.JFormattedTextField();
        txtEmail = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        dcFechaNacimiento = new com.toedter.calendar.JDateChooser();
        cmdGuardar = new javax.swing.JButton();
        cmdCancelar = new javax.swing.JButton();
        cmdNuevo = new javax.swing.JButton();
        cboTipoDocumento = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Datos del Paciente"));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Cambria", 3, 16)); // NOI18N
        jLabel1.setText("Telefono:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(30, 410, 70, 30);

        jLabel2.setFont(new java.awt.Font("Cambria", 3, 16)); // NOI18N
        jLabel2.setText("Nombres:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(30, 30, 70, 30);

        jLabel3.setFont(new java.awt.Font("Cambria", 3, 16)); // NOI18N
        jLabel3.setText("Apellidos:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(320, 20, 70, 30);

        jLabel4.setFont(new java.awt.Font("Cambria", 3, 16)); // NOI18N
        jLabel4.setText("Fecha de Nacimiento:");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(30, 120, 180, 30);

        jLabel5.setFont(new java.awt.Font("Cambria", 3, 16)); // NOI18N
        jLabel5.setText("Género:");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(320, 120, 70, 30);

        jLabel6.setFont(new java.awt.Font("Cambria", 3, 16)); // NOI18N
        jLabel6.setText("Nro. Documento:");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(30, 210, 140, 30);

        jLabel7.setFont(new java.awt.Font("Cambria", 3, 16)); // NOI18N
        jLabel7.setText("Tipo de Documento:");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(320, 210, 150, 30);

        jLabel8.setFont(new java.awt.Font("Cambria", 3, 16)); // NOI18N
        jLabel8.setText("Dirección:");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(30, 310, 100, 30);
        jPanel1.add(txtNombre);
        txtNombre.setBounds(30, 60, 270, 30);
        jPanel1.add(txtApellidos);
        txtApellidos.setBounds(320, 60, 300, 30);

        txtNumDocumento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        jPanel1.add(txtNumDocumento);
        txtNumDocumento.setBounds(30, 250, 270, 30);

        cboGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Masculino", "Femenino", "Otros" }));
        cboGenero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboGeneroActionPerformed(evt);
            }
        });
        jPanel1.add(cboGenero);
        cboGenero.setBounds(320, 160, 300, 30);
        jPanel1.add(txtDireccion);
        txtDireccion.setBounds(30, 350, 590, 30);
        jPanel1.add(txtTelefono);
        txtTelefono.setBounds(30, 450, 270, 30);
        jPanel1.add(txtEmail);
        txtEmail.setBounds(320, 450, 300, 30);

        jLabel9.setFont(new java.awt.Font("Cambria", 3, 16)); // NOI18N
        jLabel9.setText("Email:");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(320, 410, 70, 30);
        jPanel1.add(dcFechaNacimiento);
        dcFechaNacimiento.setBounds(30, 160, 270, 26);

        cmdGuardar.setText("Guardar");
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(cmdGuardar);
        cmdGuardar.setBounds(430, 530, 90, 40);

        cmdCancelar.setText("Cancelar");
        cmdCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(cmdCancelar);
        cmdCancelar.setBounds(530, 530, 90, 40);

        cmdNuevo.setText("Nuevo");
        cmdNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNuevoActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNuevo);
        cmdNuevo.setBounds(10, 530, 90, 40);

        cboTipoDocumento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cedula de identidad", "Pasaporte", "Documento de Identidad", "Otro" }));
        jPanel1.add(cboTipoDocumento);
        cboTipoDocumento.setBounds(320, 250, 300, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        if(txtNombre.getText().trim().isEmpty() || 
           txtApellidos.getText().trim().isEmpty() || 
           txtNumDocumento.getText().trim().isEmpty()){
            
            JOptionPane.showMessageDialog(this, "Los campos Nombre, Apellidos y Nro. Documento son obligatorios.", "Campos Vacíos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String fechaFormateada = "";
        if (dcFechaNacimiento.getDate() != null) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            fechaFormateada = sdf.format(dcFechaNacimiento.getDate());
        }
        
        // --- LÓGICA PRINCIPAL: INSERTAR O ACTUALIZAR ---
        if(opc == 'N') { // Si es Nuevo, insertamos
            String valores = String.format("'%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s'",
                txtNombre.getText(), txtApellidos.getText(), fechaFormateada,
                cboGenero.getSelectedItem().toString(), txtNumDocumento.getText(),
                cboTipoDocumento.getSelectedItem(), txtDireccion.getText(),
                txtTelefono.getText(), txtEmail.getText()
            );
            String campos = "nombre, apellidos, fecha_nacimiento, genero, numero_documento, tipo_documento, direccion, telefono, email";

            if(bd.insertarRegistro("pacientes(" + campos + ")", valores)){
                 JOptionPane.showMessageDialog(this, "Paciente agregado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                 limpiarCampos();
                 habilitarCampos(false);
                 habilitarBotones(true);
            } else {
                JOptionPane.showMessageDialog(this, "Ocurrió un error al guardar el paciente.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else { // Si es Modificación, actualizamos
             String actualizaciones = String.format(
                "nombre='%s', apellidos='%s', fecha_nacimiento='%s', genero='%s', numero_documento='%s', " +
                "tipo_documento='%s', direccion='%s', telefono='%s', email='%s'",
                txtNombre.getText(), txtApellidos.getText(), fechaFormateada,
                cboGenero.getSelectedItem().toString(), txtNumDocumento.getText(),
                cboTipoDocumento.getSelectedItem(), txtDireccion.getText(),
                txtTelefono.getText(), txtEmail.getText()
            );
            String condicion = "id_paciente=" + this.idPacienteModificar;
            
            if (bd.actualizarRegistro("pacientes", actualizaciones, condicion)) {
                JOptionPane.showMessageDialog(this, "Paciente actualizado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                this.dispose(); // Cierra el formulario de modificación al guardar.
            } else {
                 JOptionPane.showMessageDialog(this, "Ocurrió un error al actualizar.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_cmdGuardarActionPerformed

    private void cmdCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelarActionPerformed
        if(opc == 'N') {
            limpiarCampos();
            habilitarCampos(false);
            habilitarBotones(true);
        } else {
            this.dispose(); // Si es modificación, simplemente cierra la ventana.
        }
    }//GEN-LAST:event_cmdCancelarActionPerformed

    private void cmdNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNuevoActionPerformed
        limpiarCampos();
        habilitarCampos(true);
        habilitarBotones(false);
        txtNombre.requestFocus();
    }//GEN-LAST:event_cmdNuevoActionPerformed

    private void cboGeneroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboGeneroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboGeneroActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmAgregarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmAgregarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmAgregarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmAgregarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmAgregarPaciente dialog = new FrmAgregarPaciente(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboGenero;
    private javax.swing.JComboBox<String> cboTipoDocumento;
    private javax.swing.JButton cmdCancelar;
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JButton cmdNuevo;
    private com.toedter.calendar.JDateChooser dcFechaNacimiento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JFormattedTextField txtApellidos;
    private javax.swing.JFormattedTextField txtDireccion;
    private javax.swing.JFormattedTextField txtEmail;
    private javax.swing.JFormattedTextField txtNombre;
    private javax.swing.JFormattedTextField txtNumDocumento;
    private javax.swing.JFormattedTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
